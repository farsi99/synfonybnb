security:
    #cela nous permet de choisir l'algorithme qu'on veut
    encoders:
        App\Entity\User:
            algorithm: bcrypt

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        in_memory: { memory: ~ }
        #symfony va aller chercher ds la base, l'entité user et le propriété email pour me connecter
        in_database: 
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true

            #On appelle le provider à appliquer pour se connecter
            provider: in_database

            #On appelle le formulaire de connexion
            form_login:
                login_path: acount_login
                check_path: acount_login
            
            logout:
                path: acount_logout
                target: acount_login


            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
